# SaaS AI Agent Platform

A modern, multi-tenant AI agent platform built with Next.js 13, inspired by the Nexux theme. Features real-time chat, usage tracking, and PayFast integration for the South African market.

## 🚀 Key Features

- **Modern UI Design**
  - Stunning gradients and glass-morphism effects
  - Smooth animations and transitions
  - Fully responsive design
  - Nexux theme-inspired components

- **AI Agent Platform**
  - OpenAI-powered chat capabilities
  - Real-time messaging with Socket.IO
  - Usage tracking and rate limiting
  - Multi-tenant architecture

- **South African Payment Integration**
  - PayFast payment gateway
  - Usage-based billing
  - Subscription management
  - Payment webhook handling

- **Advanced Dashboard**
  - Modern analytics with trend visualization
  - Team management with role-based access
  - Customizable agent configuration
  - Real-time usage monitoring
  - Smart billing interface
  - Intuitive settings management

## 🎨 UI Components

### Core Components (`src/app/components/ui/`)

- **Button.tsx**
  - Primary, secondary, outline, ghost variants
  - Loading states and animations
  - Size variations and full-width options
  - Enhanced hover and focus states

- **Card.tsx**
  - Glass-morphism effects
  - Gradient background options
  - Interactive hover animations
  - Status display variants
  - Shadow system

- **SectionHeading.tsx**
  - Animated reveal effects
  - Light/dark variants
  - Subtitle support
  - Responsive sizing

### Dashboard Features (`src/app/dashboard/`)

- **Usage Analytics**
  - Real-time statistics visualization
  - Trend analysis and graphs
  - Activity monitoring
  - Usage forecasting
  - Export capabilities

- **Settings Management**
  - Profile customization
  - Team member controls
  - API key management
  - Notification preferences
  - Security settings

- **Billing Interface**
  - Plan comparison tools
  - Usage tracking
  - Payment processing
  - Invoice history
  - Currency selection

- **Chat System**
  - Real-time messaging
  - Message history
  - Typing indicators
  - File sharing
  - Status updates

### Landing Page (`src/app/components/shared/`)

- **HeroSection.tsx**
  - Animated background
  - Trust indicators
  - CTA optimization
  - Mobile responsiveness

- **FeatureList.tsx**
  - Interactive cards
  - Icon integration
  - Animation system
  - Responsive grid

- **PricingTable.tsx**
  - Feature comparison
  - Popular plan highlighting
  - Interactive elements
  - Responsive design

- **TestimonialList.tsx**
  - Dynamic ratings
  - Client showcases
  - Company branding
  - Carousel display

- **ContactSection.tsx**
  - Smart form validation
  - Social integration
  - Location mapping
  - Response handling

## 🛠️ Technical Stack

- **Frontend**: Next.js 13, React, TypeScript
- **Styling**: Tailwind CSS, CSS Variables
- **Database**: PostgreSQL with Prisma ORM
- **Real-time**: Socket.IO
- **Payments**: PayFast Integration
- **Authentication**: NextAuth.js
- **AI**: OpenAI API

## 🎯 Design Philosophy

The UI is built with these principles:

- **Consistent Animation**: Smooth transitions and reveals
- **Modern Aesthetics**: Glass-morphism and gradients
- **Responsive Design**: Mobile-first approach
- **Performance**: Optimized loading and transitions
- **Accessibility**: WCAG compliance
- **Brand Cohesion**: Consistent color scheme and styling

## 🚦 Getting Started

1. Clone the repository

2. Install dependencies:
```bash
npm install
```

3. Set up environment variables:
```bash
cp .env.example .env.local
```

4. Initialize the database:
```bash
npx prisma generate
npx prisma db push
```

5. Run the development server:
```bash
npm run dev
```

## 📦 Project Structure

```
src/
├── app/                 # Next.js 13 app directory
│   ├── components/      # React components
│   │   ├── ui/         # Core UI components
│   │   ├── shared/     # Shared components
│   │   └── providers/  # Context providers
│   ├── api/            # API routes
│   └── dashboard/      # Dashboard pages
├── styles/             # Global styles
├── lib/               # Utility functions
└── config/            # Site configuration
```

## 🎨 Customization

- Edit `src/styles/globals.css` for theme variables
- Modify `tailwind.config.ts` for design tokens
- Update `src/config/site.ts` for site metadata
